import heapq

class Node:
    def __init__(self, state, parent=None, cost=0, heuristic=0):
        self.state = state
        self.parent = parent
        self.cost = cost
        self.heuristic = heuristic
    
    def __lt__(self, other):
        return (self.cost + self.heuristic) < (other.cost + other.heuristic)

def astar(start, goal, neighbors_func, heuristic_func):
    open_list = []
    closed_set = set()
    
    start_node = Node(state=start, cost=0, heuristic=heuristic_func(start))
    heapq.heappush(open_list, start_node)
    
    while open_list:
        current_node = heapq.heappop(open_list)
        
        if current_node.state == goal:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]
        
        closed_set.add(current_node.state)
        
        for neighbor in neighbors_func(current_node.state):
            if neighbor in closed_set:
                continue
            
            new_cost = current_node.cost + 1  
            new_heuristic = heuristic_func(neighbor)
            new_node = Node(state=neighbor, parent=current_node, cost=new_cost, heuristic=new_heuristic)
            
            
            existing_node = next((n for n in open_list if n.state == neighbor), None)
            if existing_node and new_cost < existing_node.cost:
                open_list.remove(existing_node)
                heapq.heappush(open_list, new_node)
            elif not existing_node:
                heapq.heappush(open_list, new_node)
    
    return None  


def neighbors(node):
    x, y = node
    possible_neighbors = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]
    return [(nx, ny) for nx, ny in possible_neighbors if 0 <= nx < 5 and 0 <= ny < 5]

def heuristic(node):
    gx, gy = goal
    x, y = node
    return abs(gx - x) + abs(gy - y)

start = (0, 0)
goal = (4, 4)
path = astar(start, goal, neighbors, heuristic)

if path:
    print("Path found:", path)
else:
    print("No path found")
