class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.adjacency_list = {}
        for vertex in range(vertices):
            self.adjacency_list[vertex] = []

    def add_edge(self, u, v):
        self.adjacency_list[u].append(v)
        self.adjacency_list[v].append(u)

    def dfs(self, start_vertex):
        visited = [False] * self.vertices
        self._dfs_recursive(start_vertex, visited)

    def _dfs_recursive(self, vertex, visited):
        visited[vertex] = True
        print(vertex, end=' ')

        for neighbor in self.adjacency_list[vertex]:
            if not visited[neighbor]:
                self._dfs_recursive(neighbor, visited)


g = Graph(7)
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 3)
g.add_edge(1, 4)
g.add_edge(2, 5)
g.add_edge(2, 6)

print("Depth-First Traversal starting from vertex 0:")
g.dfs(0)

